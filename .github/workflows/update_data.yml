name: Update CSVs daily

on:
  schedule:
    # Horario de invierno (CET): 22:00 España = 21:00 UTC
    - cron: "0 21 * * 1-5"
    # Horario de verano (CEST): 22:00 España = 20:00 UTC  
    - cron: "0 20 * * 1-5"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yfinance pandas requests lxml html5lib

      - name: Create update script
        run: |
          cat > update_csv.py << 'EOF'
          import yfinance as yf
          import pandas as pd
          import os
          from datetime import datetime, timedelta
          import requests
          from io import StringIO
          
          def get_sp500_tickers():
              """Obtiene tickers actuales del S&P 500"""
              try:
                  url = "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
                  tables = pd.read_html(url)
                  df = tables[0]
                  tickers = df.iloc[:, 0].str.replace('.', '-').tolist()
                  return [t for t in tickers if t and len(t) <= 6]
              except:
                  return []
          
          def get_nasdaq100_tickers():
              """Obtiene tickers actuales del Nasdaq-100"""
              try:
                  url = "https://en.wikipedia.org/wiki/NASDAQ-100"
                  tables = pd.read_html(url)
                  # Intentar encontrar la tabla correcta
                  for table in tables:
                      if len(table.columns) >= 2:
                          for col in table.columns:
                              if 'Ticker' in str(col) or 'Symbol' in str(col):
                                  tickers = table[col].str.replace('.', '-').tolist()
                                  return [t for t in tickers if t and len(t) <= 6]
                  # Fallback
                  if len(tables) >= 3:
                      tickers = tables[2].iloc[:, 1].str.replace('.', '-').tolist()
                      return [t for t in tickers if t and len(t) <= 6]
                  return []
              except:
                  return []
          
          def update_ticker_data(ticker):
              """Actualiza datos de un ticker específico"""
              try:
                  filename = f"data/{ticker}.csv"
                  
                  # Si no existe el archivo, descargar todo el historial
                  if not os.path.exists(filename):
                      print(f"Descargando historial para {ticker}...")
                      data = yf.download(ticker, period="max")
                      if not data.empty:
                          data.to_csv(filename)
                          print(f"Guardado {ticker}")
                          return True
                      return False
                  
                  # Si existe, solo actualizar datos recientes
                  df = pd.read_csv(filename, index_col="Date", parse_dates=True)
                  if len(df) > 0:
                      last_date = df.index[-1]
                      # Si ya está actualizado (últimos 2 días), no hacer nada
                      if last_date.date() >= (datetime.now().date() - timedelta(days=2)):
                          print(f"{ticker} ya está actualizado")
                          return True
                      
                      # Descargar datos desde la última fecha
                      start_date = last_date - timedelta(days=5)
                      new_data = yf.download(ticker, start=start_date)
                      if not new_data.empty:
                          combined = pd.concat([df, new_data])
                          combined = combined[~combined.index.duplicated(keep='last')].sort_index()
                          combined.to_csv(filename)
                          print(f"Actualizado {ticker}")
                          return True
                  else:
                      # Archivo vacío, descargar historial
                      data = yf.download(ticker, period="max")
                      if not data.empty:
                          data.to_csv(filename)
                          print(f"Guardado {ticker} (archivo vacío)")
                          return True
                          
              except Exception as e:
                  print(f"Error con {ticker}: {e}")
                  return False
              return False
          
          if __name__ == "__main__":
              print("Obteniendo tickers actuales...")
              sp500 = get_sp500_tickers()
              nasdaq = get_nasdaq100_tickers()
              tickers = list(set(sp500 + nasdaq + ['SPY', 'QQQ']))  # Incluir benchmarks
              
              print(f"Actualizando {len(tickers)} tickers...")
              updated = 0
              errors = 0
              
              for i, ticker in enumerate(tickers, 1):
                  print(f"[{i}/{len(tickers)}] {ticker}")
                  if update_ticker_data(ticker):
                      updated += 1
                  else:
                      errors += 1
              
              print(f"Completado: {updated} actualizados, {errors} errores")
          EOF

      - name: Run update script
        run: python update_csv.py

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add data/*.csv
          git diff --staged --quiet || (git commit -m "Auto-update CSVs ($(date -u +'%Y-%m-%d %H:%M:%S'))" && git push) || echo "No changes to commit or push failed"
