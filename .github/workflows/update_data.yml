name: Update CSVs daily

on:
  schedule:
    # Ejecutar de lunes a viernes a las 22:30 UTC (siempre después del cierre en ET)
    - cron: "30 22 * * 1-5"
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Forzar actualización incluso en fin de semana'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0  # Importante para el historial completo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yfinance pandas requests lxml html5lib pytz

      # Importante: usamos el update_csv.py del repo (no lo sobrescribimos)
      - name: Run update script
        run: |
          if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
            python update_csv.py --force
          else
            python update_csv.py
          fi

      - name: Clean up delisted tickers
        run: |
          python -c "
          import os
          import glob
          import pandas as pd
          
          # Lista de tickers que sabemos están dados de baja
          delisted_tickers = ['ABK', 'ANR', 'AYE', 'BMC', 'CBE', 'COV', 'EVHC', 'FMCN', 'GAS', 'MEE', 'NCC', 'NFX', 'SBL', 'VIP', 'VMED']
          
          print('🧹 Limpiando tickers dados de baja...')
          
          removed_count = 0
          for ticker in delisted_tickers:
              file_path = f'data/{ticker}.csv'
              if os.path.exists(file_path):
                  try:
                      os.remove(file_path)
                      print(f'  ❌ Eliminado: {ticker}.csv')
                      removed_count += 1
                  except Exception as e:
                      print(f'  ⚠️ Error eliminando {ticker}: {e}')
          
          print(f'\n✅ Eliminados {removed_count} archivos de tickers dados de baja')
          
          # Verificar cuántos archivos quedan
          remaining_files = len(glob.glob('data/*.csv'))
          print(f'📁 Archivos restantes: {remaining_files}')
          "

      - name: Final verification
        run: |
          python -c "
          import pandas as pd
          import glob
          
          print('🔍 Verificación final...')
          
          samples = glob.glob('data/*.csv')[:10]
          issues = []
          
          for file in samples:
              try:
                  df = pd.read_csv(file, index_col='Date', parse_dates=True)
                  ticker = file.split('/')[-1].replace('.csv', '')
                  
                  if 'Adj Close' in df.columns:
                      issues.append(f'{ticker}: TIENE Adj Close')
                  elif len(df.columns) != 5:
                      issues.append(f'{ticker}: {len(df.columns)} columnas')
                  else:
                      print(f'  ✅ {ticker}: OK')
              except Exception as e:
                  issues.append(f'{file}: {e}')
          
          if issues:
              print('\n⚠️ Problemas:')
              for issue in issues:
                  print(f'  - {issue}')
          else:
              print('\n✅ Todos los archivos OK')
          "

      - name: Commit and push changes
        run: |
          # Configurar git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # IMPORTANTE: Hacer pull primero para obtener cambios remotos
          echo "📥 Obteniendo cambios remotos..."
          git pull origin main --rebase || {
              echo "⚠️ Error en pull, intentando merge..."
              git rebase --abort 2>/dev/null || true
              git pull origin main --no-rebase --strategy=ours || {
                  echo "❌ No se pudo hacer pull, abortando..."
                  exit 1
              }
          }
          
          # Añadir todos los cambios
          git add .
          
          # Verificar si hay cambios staged
          if ! git diff --staged --quiet; then
            echo "📊 Hay cambios para commitear, procediendo..."
            
            # Commit
            COMMIT_MSG="📊 Update CSVs $(date -u +'%Y-%m-%d %H:%M') UTC - Auto update"
            git commit -m "$COMMIT_MSG"
            
            # Push con reintentos
            MAX_RETRIES=3
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if git push origin main; then
                echo "✅ Cambios pusheados exitosamente"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "⚠️ Push fallido, intento $RETRY_COUNT de $MAX_RETRIES"
                
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "📥 Haciendo pull antes de reintentar..."
                  git pull origin main --rebase
                  sleep 2
                else
                  echo "❌ No se pudo hacer push después de $MAX_RETRIES intentos"
                  exit 1
                fi
              fi
            done
          else
            echo "📊 No hay cambios para commitear"
          fi

      - name: Summary
        if: always()
        run: |
          echo "📊 RESUMEN DE LA EJECUCIÓN"
          echo "=========================="
          echo "Fecha: $(date -u +'%Y-%m-%d %H:%M:%S') UTC"
          echo "Archivos CSV: $(ls -1 data/*.csv 2>/dev/null | wc -l)"
          echo ""
          
          # Mostrar últimos commits
          echo "📝 Últimos 3 commits:"
          git log --oneline -3
